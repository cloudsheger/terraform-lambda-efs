pipeline {

    parameters {
        string(name: 'tfvars_file', defaultValue: 'terraform.tfvars', description: 'tfvars file name')
        string(name: 'env_dir', defaultValue: 'environments', description: 'Directory containing environment-specific tfvars files')
        booleanParam(name: 'auto_approve', defaultValue: false, description: 'Whether to auto-approve Terraform apply/destroy')
    }

    agent {

    docker {
        image 'hashicorp/terraform:1.2.0'
        args  '--entrypoint="" -u root -v /opt/jenkins/.aws:/root/.aws -v /tmp:/root/'
          }
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    stages {
        stage('Terraform Init') {
            steps {
                sh 'terraform init -input=false'
            }
        }
        stage('Terraform Plan') {
            steps {
                sh 'terraform workspace select ${params.env_dir}'
                sh "terraform plan -input=false -out tfplan -var-file=${params.env_dir}/${params.tfvars_file}"
                sh 'terraform show -no-color tfplan > tfplan.txt'
            }
        }
        stage('Terraform Apply/Destroy') {
            steps {
                script {
                    if (params.auto_approve) {
                        sh "terraform apply -auto-approve -var-file=${params.env_dir}/${params.tfvars_file}"
                    } else {
                        def userInput = input message: 'Do you want to run terraform apply or terraform destroy?', ok: 'Apply', parameters: [choice(choices: ['Apply', 'Destroy'], name: 'Choice')]
                        if (userInput == 'Apply') {
                            sh "terraform apply -var-file=${params.env_dir}/${params.tfvars_file}"
                        } else if (userInput == 'Destroy') {
                            sh 'terraform destroy'
                        } else {
                            echo 'Terraform apply/destroy cancelled by user'
                        }
                    }
                }
            }
        }
    }
}
